- filename: ./server/src/app/db/primary/tables.py
  content: |
    from piccolo.table import Table
    from piccolo.columns import Varchar, Timestamp

    class Clients(Table, tablename="clients"):
        name:Varchar = Varchar(length=100, unique=True, index=True)
        email:Varchar  = Varchar(length=100, unique=True, index=True)
        company:Varchar  = Varchar(length=100)
        role:Varchar  = Varchar(length=100)
        created_at:Timestamp = Timestamp(auto_now=True)
        updated_at:Timestamp = Timestamp(auto_now_add=True)

- filename: ./server/src/app/db/primary/migrations/{filename}
  content: |
    from piccolo.apps.migrations.auto.migration_manager import MigrationManager

    ID = "{migrations_timestamp}"
    DESCRIPTION = "Creating the Clients table"

    async def forwards():
        manager = MigrationManager(
            migration_id=ID, app_name="primary", description=DESCRIPTION
        )

        print(f"running {ID}")

        manager.add_table("Clients", tablename="clients")

        manager.add_column(
            table_class_name="Clients",
            tablename="clients",
            column_name="name",
            column_class_name="Varchar",
            params={
                "length": 100,
                "unique": True,
                "index": True,
            },
        )

        manager.add_column(
            table_class_name="Clients",
            tablename="clients",
            column_name="email",
            column_class_name="Varchar",
            params={
                "length": 100,
                "unique": True,
                "index": True,
            },
        )

        manager.add_column(
            table_class_name="Clients",
            tablename="clients",
            column_name="company",
            column_class_name="Varchar",
            params={
                "length": 100,
            },
        )

        manager.add_column(
            table_class_name="Clients",
            tablename="clients",
            column_name="role",
            column_class_name="Varchar",
            params={
                "length": 100,
            },
        )

        manager.add_column(
            table_class_name="Clients",
            tablename="clients",
            column_name="created_at",
            column_class_name="Timestamp",
            params={
                "auto_now": True,
            },
        )

        manager.add_column(
            table_class_name="Clients",
            tablename="clients",
            column_name="updated_at",
            column_class_name="Timestamp",
            params={
                "auto_now_add": True,
            },
        )

        return manager

- filename: ./server/src/app/db/primary/db_populate.py
  content: |
    import asyncio
    from faker import Faker
    from tables import Clients
    from datetime import datetime
    from piccolo.engine import PostgresEngine, engine_finder

    async def create_random_clients(num_clients=50):
        """
        Creates fake client data using the Faker library and inserts it into the Clients table.
        """
        fake = Faker()

        for _ in range(num_clients):
            name = fake.name()
            email = fake.email()
            company = fake.company()
            role = fake.job()

            await Clients.insert(
                Clients(
                    name=name,
                    email=email,
                    company=company,
                    role=role,
                    created_at=datetime.now(),
                    updated_at=datetime.now()
                )
            )
            print(f"Created client {name}, email: {email}, company: {company}, role: {role}")
        print(f"Created {num_clients} random clients.")

    async def main():
        engine = engine_finder()
        if isinstance(engine, PostgresEngine):
            await engine.start_connection_pool()
            try:
                await create_random_clients()
            finally:
                await engine.close_connection_pool()
        else:
            await create_random_clients()

    if __name__ == "__main__":
        asyncio.run(main())
