- filename: ./src/app/db/primary/__init__.py
  content: |

- filename: ./src/app/db/primary/migrations/__init__.py
  content: |

- filename: ./src/app/db/primary/piccolo_conf.py
  content: |
    from piccolo.conf.apps import AppRegistry
    from piccolo.engine.sqlite import SQLiteEngine

    DB = SQLiteEngine(path="primary_db.sqlite")

    # A list of paths to piccolo apps
    # e.g. ['blog.piccolo_app']
    APP_REGISTRY = AppRegistry(apps=["piccolo_app"])

- filename: ./src/app/db/primary/piccolo_app.py
  content: |
    """
    Import all of the Tables subclasses in your app here, and register them with
    the APP_CONFIG.
    """

    from piccolo.conf.apps import AppConfig, table_finder

    APP_NAME = "primary"

    APP_CONFIG = AppConfig(
        app_name=APP_NAME,
        migrations_folder_path="migrations",
        table_classes=table_finder(modules=["tables"]),
        migration_dependencies=[],
        commands=[],
    )

- filename: ./src/app/db/primary/tables.py
  content: |
    from piccolo.table import Table
    from piccolo.columns import Varchar, Timestamp

    class Clients(Table, tablename="clients"):
        name = Varchar(length=100, unique=True, index=True)
        email = Varchar(length=100, unique=True, index=True)
        company = Varchar(length=100)
        role = Varchar(length=100)
        created_at = Timestamp(auto_now=True)
        updated_at = Timestamp(auto_now_add=True)

- filename: ./src/app/db/primary/db_populate.py
  content: |
    import asyncio
    from faker import Faker
    from datetime import datetime
    from tables import Clients
    from piccolo.engine import PostgresEngine, engine_finder

    async def create_random_clients(num_clients=50):
        """
        Creates fake client data using the Faker library and inserts it into the Clients table.
        """
        fake = Faker()

        for _ in range(num_clients):
            name = fake.name()
            email = fake.email()
            company = fake.company()
            role = fake.job()

            await Clients.insert(
                Clients(
                    name=name,
                    email=email,
                    company=company,
                    role=role,
                    created_at=datetime.now(),
                    updated_at=datetime.now()
                )
            )
            print(f"Created client {name}, email: {email}, company: {company}, role: {role}")
        print(f"Created {num_clients} random clients.")

    async def main():
        engine = engine_finder()
        if isinstance(engine, PostgresEngine):
            await engine.start_connection_pool()
            try:
                await create_random_clients()
            finally:
                await engine.close_connection_pool()
        else:
            await create_random_clients()

    if __name__ == "__main__":
        asyncio.run(main())
